#+TITLE: Install Script
#+DESCRIPTION: A install script for the software I use. Heavily inspired by dtos: =https://gitlab.com/dtos/dtos=
#+AUTHOR: Urban Katern
#+PROPERTY: header-args :tangle myos
#+auto_tangle: t
#+STARTUP: showeverything

* TABLE OF CONTENTS :toc:
- [[#shebang-plus-comments][Shebang plus comments]]
- [[#adding-dtos-repo-to-pacmanconf][Adding DTOS repo to pacman.conf]]
- [[#installing-paru][Installing paru]]
- [[#install-window-managers][Install window managers]]
- [[#install-the-base-packages-from-repos][Install the base packages from repos]]
- [[#copy-configs-over-from-etcdtos-into-home][Copy configs over from /etc/dtos into $HOME]]
- [[#choosing-a-bar-for-xmonad][Choosing a bar for XMonad]]
- [[#copy-pacman-hooks][Copy pacman hooks]]
- [[#copy-dmscripts-config-and-set-important-variables][Copy dmscripts config and set important variables]]
- [[#compiling-xmonad][Compiling xmonad]]
- [[#compiling-the-xmonadctl-script][Compiling the xmonadctl script]]
- [[#set-default-user-shell][Set default USER shell]]
- [[#enable-sddm-for-login-manager][Enable SDDM for login manager]]
- [[#message-stating-that-the-installation-is-complete][Message stating that the installation is complete!]]

* Shebang plus comments

#+begin_src bash :shebang "#!/usr/bin/env bash"
# WARNING: Run this script at your own risk.
# DEPENDENCIES: libnewt (probably already on the system)
#+end_src


* Adding DTOS repo to pacman.conf

#+begin_src bash
addrepo() { \
    echo "#########################################################"
    echo "## Adding the DTOS core repository to /etc/pacman.conf ##"
    echo "#########################################################"
    grep -qxF "[dtos-core-repo]" /etc/pacman.conf ||
        ( echo " "; echo "[dtos-core-repo]"; echo "SigLevel = Optional DatabaseOptional"; \
        echo "Server = https://gitlab.com/dtos/\$repo/-/raw/main/\$arch") | sudo tee -a /etc/pacman.conf
}

addrepo || error "Error adding DTOS repo to /etc/pacman.conf."

#+end_src

* Installing paru

#+begin_src bash
sudo pacman --noconfirm --needed -Sy dtos-core-repo/paru-bin || error "Error installing dtos-core-repo/paru-bin."
#+end_src

* Install window managers

#+begin_src bash
sudo pacman -Sy xmonad xmonad-contrib dtos-xmonad xmobar dtos-xmobar polybar dtos-polybar

sudo pacman -Sy awesome dtos-awesome

sudo pacman -Sy bspwm sxhkd dtos-bspwm dtos-sxhkd polybar dtos-polybar

sudo pacman -Sy dtos-dwm dtos-dwmblocks && cp /etc/dtos/.config/dwm/dwm.desktop /usr/share/xsessions/dwm.desktop

paru --needed --ask 4 -Sy qtile qtile-extras dtos-qtile python-psutil
#+end_src

* Install the base packages from repos
All packages listed are either in the standard Arch repos or in the DTOS repos.  All of these will be installed using pacman.  The only program that will not be installed through pacman is Doom Emacs, which will be installed later in the script.

=NOTE:= The '--ask 4' option is an undocumented option for pacman that can be found in pacman's source code (in pacman's alpm.h).  Adding this flags means that all questions about removing packages that are conflicts will automatically be answered YES.

#+begin_src bash
sudo pacman --needed --ask 4 -Sy - < pkglist.txt || error "Failed to install a required package from pkglist.txt."
paru -Sy youtube-dl
#+end_src

* Copy configs over from /etc/dtos into $HOME
While it would be easier to make packages that could install DTOS configs directly to the appropriate places in the $HOME folder, pacman does not allow for this.  Pacman is not allowed to touch $HOME ever!  The better way to do this is to install the configs in /etc/skel which is the standard directory to place such config files, but on many distros (for ex. Manjaro and Arco) /etc/skel is already used to store the distro's own config files.  So to avoid conflicts, all DTOS configs are placed in /etc/dtos and then copied over to $HOME.  A backup of config is created.  BEWARE!

=NOTE:= The /etc/dtos directory contains files and directories that are automatically copied over to a new user's home directory when such user is created by the 'useradd' or the 'adduser' program, depending on your Linux distro.

#+begin_src bash
echo "################################################################"
echo "## Copying DTOS configuration files from /etc/dtos into \$HOME ##"
echo "################################################################"
[ ! -d /etc/dtos ] && sudo mkdir /etc/dtos
[ -d /etc/dtos ] && mkdir ~/dtos-backup-$(date +%Y.%m.%d-%H%M) && cp -Rf /etc/dtos ~/dtos-backup-$(date +%Y.%m.%d-%H%M)
[ ! -d ~/.config ] && mkdir ~/.config
[ -d ~/.config ] && mkdir ~/.config-backup-$(date +%Y.%m.%d-%H%M) && cp -Rf ~/.config ~/.config-backup-$(date +%Y.%m.%d-%H%M)
cd /etc/dtos && cp -Rf . ~ && cd -

find $HOME/.local/bin -type f -print0 | xargs -0 chmod 775
#+end_src

* Choosing a bar for XMonad

#+begin_src bash
if [ -d "/etc/dtos/.config/xmonad/" ]; then
    PS3='What bar would you like to use with XMonad? (enter number): '
    bars=("polybar" "xmobar" "both")
    select choice in "${bars[@]}"; do
        case $choice in
             polybar)
                sudo pacman -S dtos-polybar polybar
                cp /etc/dtos/.config/xmonad/xmonad-example-configs/xmonad-with-polybar.hs $HOME/.config/xmonad/xmonad.hs
                break
                ;;
             xmobar)
                sudo pacman -S dtos-xmobar xmobar
                cp /etc/dtos/.config/xmonad/xmonad-example-configs/xmonad-with-xmobar.hs $HOME/.config/xmonad/xmonad.hs
                break
                ;;
             both)
                sudo pacman -S dtos-polybar dtos-xmobar polybar xmobar
                cp /etc/dtos/.config/xmonad/xmonad-example-configs/xmonad-with-polybar.hs $HOME/.config/xmonad/xmonad.hs
                break
                ;;
             ,*)
                echo "Invalid option $REPLY. You must choose a valid option."
                ;;
        esac
    done
fi

#+end_src

* Copy pacman hooks
The following pacman hooks force xmonad to recompile every time there are updates to xmonad or the haskell libraries.

#+begin_src bash
[ ! -d /etc/pacman.d/hooks ] && sudo mkdir /etc/pacman.d/hooks
sudo cp /etc/dtos/.config/xmonad/pacman-hooks/recompile-xmonad.hook /etc/pacman.d/hooks/
sudo cp /etc/dtos/.config/xmonad/pacman-hooks/recompile-xmonadh.hook /etc/pacman.d/hooks/
#+end_src

* Copy dmscripts config and set important variables

#+begin_src bash
[ ! -d $HOME/.config/dmscripts ] && mkdir $HOME/.config/dmscripts
cp /etc/dmscripts/config $HOME/.config/dmscripts/config
sed -i 's/DMBROWSER=\"brave\"/DMBROWSER=\"qutebrowser\"/g' $HOME/.config/dmscripts/config
sed -i 's/DMTERM=\"st -e\"/DMTERM=\"alacritty -e\"/g' $HOME/.config/dmscripts/config
sed -i 's/setbg_dir=\"${HOME}\/Pictures\/Wallpapers\"/setbg_dir=\"\/usr\/share\/backgrounds\/dtos-backgrounds\"/g' $HOME/.config/dmscripts/config
#+end_src

* Compiling xmonad

#+begin_src bash
xmonad_recompile() { \
    echo "########################"
    echo "## Recompiling XMonad ##"
    echo "########################"
    xmonad --recompile
}

xmonad_recompile || echo "Recompiling Xmonad failed!"
#+end_src

* Compiling the xmonadctl script

#+begin_src bash
xmonadctl_compile() { \
    echo "####################################"
    echo "## Compiling the xmonadctl script ##"
    echo "####################################"
    ghc -dynamic "$HOME"/.config/xmonad/xmonadctl.hs
}

xmonadctl_compile || echo "Compiling the xmonadctl script failed!"
#+end_src

* Set default USER shell

#+begin_src bash
PS3='Set default user shell (enter number): '
shells=("fish" "bash" "zsh" "quit")
select choice in "${shells[@]}"; do
    case $choice in
         fish | bash | zsh)
            sudo chsh $USER -s "/bin/$choice" && \
            echo -e "$choice has been set as your default USER shell. \
                    \nLogging out is required for this take effect."
            break
            ;;
         quit)
            echo "User quit without changing shell."
            break
            ;;
         *)
            echo "invalid option $REPLY"
            ;;
    esac
done
#+end_src

* Enable SDDM for login manager

#+begin_src bash
# Disable the current login manager
sudo systemctl disable $(grep '/usr/s\?bin' /etc/systemd/system/display-manager.service | awk -F / '{print $NF}') || echo "Cannot disable current display manager."
# Enable sddm as login manager
sudo systemctl enable sddm
echo "###################################"
echo "## Enable sddm as login manager. ##"
echo "###################################"

## Make multicolor-sddm-theme the default sddm theme ##
# This is the sddm system configuration file.
[ -f "/usr/lib/sddm/sddm.conf.d/default.conf" ] && \
    sudo cp /usr/lib/sddm/sddm.conf.d/default.conf /usr/lib/sddm/sddm.conf.d/default.conf.backup && \
    sudo sed -i 's/^Current=*.*/Current=multicolor-sddm-theme/g' /usr/lib/sddm/sddm.conf.d/default.conf

# This is the sddm local configuration file.
[ -f "/etc/sddm.conf" ] && \
    sudo cp /etc/sddm.conf /etc/sddm.conf.backup && \
    sudo sed -i 's/^Current=*.*/Current=multicolor-sddm-theme/g' /etc/sddm.conf

# Create a local configuration file if it doesn't exist.
# Standard Arch Linux does not create this file by default.
[ ! -f "/etc/sddm.conf" ] && \
    sudo cp /usr/lib/sddm/sddm.conf.d/default.conf /etc/sddm.conf || echo "Default sddm system config file is not found."

# ArcoLinux B Awesome uses this config location.
[ -f "/etc/sddm.conf.d/kde_settings.conf" ] && \
    sudo cp /etc/sddm.conf.d/kde_settings.conf /etc/sddm.conf.d/kde_settings.backup && \
    sudo sed -i 's/^Current=*.*/Current=multicolor-sddm-theme/g' /etc/sddm.conf.d/kde_settings.conf
#+end_src

* Message stating that the installation is complete!

#+begin_src bash
echo "##############################"
echo "## DTOS has been installed! ##"
echo "##############################"

while true; do
    read -p "Do you want to reboot to get your dtos? [Y/n] " yn
    case $yn in
        [Yy]* ) reboot;;
        [Nn]* ) break;;
        "" ) reboot;;
        * ) echo "Please answer yes or no.";;
    esac
done
#+end_src
